

services:
  # 1. Keycloak Database (PostgreSQL)
  keycloak-db:
    image: postgres:15-alpine
    container_name: keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak_password
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 2. Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin_password
    command: start-dev
    ports:
      - "8080:8080"
    depends_on:
      keycloak-db:
        condition: service_healthy
    networks:
      - backend-network
      - frontend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 3. PostGIS Database for Backend App
  app-db:
    image: postgis/postgis:15-3.3-alpine
    container_name: app-db
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: app_password
    volumes:
      - app_db_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 4. Java Spring Backend Server
  backend:
    image: openjdk:17-jdk-slim
    container_name: spring-backend
    working_dir: /app
    volumes:
      - ./backend:/app
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: app-db
      DB_PORT: 5432
      DB_NAME: appdb
      DB_USERNAME: appuser
      DB_PASSWORD: app_password
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: master
    command: >
      sh -c "
        if [ -f ./gradlew ]; then
          ./gradlew bootRun
        elif [ -f ./mvnw ]; then
          ./mvnw spring-boot:run
        elif [ -f ./target/*.jar ]; then
          java -jar ./target/*.jar
        else
          echo 'No Spring Boot application found. Please ensure your application is built.'
          tail -f /dev/null
        fi
      "
    ports:
      - "8081:8080"
    depends_on:
      app-db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - backend-network
      - frontend-network
    restart: unless-stopped

  # 5. React Vite Frontend App
  frontend:
    image: node:18-alpine
    container_name: react-frontend
    working_dir: /app
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    environment:
      VITE_API_URL: http://localhost:8081
      VITE_KEYCLOAK_URL: http://localhost:8080
      VITE_KEYCLOAK_REALM: master
      VITE_KEYCLOAK_CLIENT_ID: frontend-client
    command: >
      sh -c "
        if [ ! -d node_modules ]; then
          npm install
        fi
        npm run dev -- --host 0.0.0.0 --port 3000
      "
    ports:
      - "3000:3000"
    networks:
      - frontend-network
    restart: unless-stopped
    depends_on:
      - backend

  # 6. Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
      - keycloak
    networks:
      - frontend-network
    restart: unless-stopped

volumes:
  keycloak_db_data:
    driver: local
  app_db_data:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  backend-network:
    driver: bridge
    internal: true
  frontend-network:
    driver: bridge